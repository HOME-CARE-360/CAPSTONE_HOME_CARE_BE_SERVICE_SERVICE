generator client {
  provider      = "prisma-client-js"
//  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_MAIN")
}

model User {
  id                                               Int                 @id @default(autoincrement())
  email                                            String              @unique
  password                                         String
  name                                             String              @db.VarChar(500)
  phone                                            String              @db.VarChar(50)
  avatar                                           String?             @db.VarChar(1000)
  totpSecret                                       String?             @db.VarChar(1000)
  status                                           UserStatus          @default(INACTIVE)
  createdById                                      Int?
  updatedById                                      Int?
  deletedById                                      Int?
  deletedAt                                        DateTime?
  createdAt                                        DateTime            @default(now())
  updatedAt                                        DateTime            @updatedAt
  BookingReport_BookingReport_reporterIdToUser     BookingReport[]     @relation("BookingReport_reporterIdToUser")
  BookingReport_BookingReport_reviewedByIdToUser   BookingReport[]     @relation("BookingReport_reviewedByIdToUser")
  createdCategories                                Category[]          @relation("CategoryCreatedBy")
  deletedCategories                                Category[]          @relation("CategoryDeletedBy")
  updatedCategories                                Category[]          @relation("CategoryUpdatedBy")
  customerProfile                                  CustomerProfile?
  devices                                          Device[]
  notifications                                    Notification[]
  createdPermissions                               Permission[]        @relation("PermissionCreatedBy")
  deletedPermissions                               Permission[]        @relation("PermissionDeletedBy")
  updatedPermissions                               Permission[]        @relation("PermissionUpdatedBy")
  refreshTokens                                    RefreshToken[]
  createdRoles                                     Role[]              @relation("RoleCreatedBy")
  deletedRoles                                     Role[]              @relation("RoleDeletedBy")
  updatedRoles                                     Role[]              @relation("RoleUpdatedBy")
  createdServices                                  Service[]           @relation("ServiceCreatedBy")
  deletedServices                                  Service[]           @relation("ServiceDeletedBy")
  updatedServices                                  Service[]           @relation("ServiceUpdatedBy")
  serviceProvider                                  ServiceProvider?
  verifiedProviders                                ServiceProvider[]   @relation("VerifiedProviders")
  staff                                            Staff?
  createdBy                                        User?               @relation("CreatorUsers", fields: [createdById], references: [id])
  createdUsers                                     User[]              @relation("CreatorUsers")
  deletedBy                                        User?               @relation("DeletorUsers", fields: [deletedById], references: [id])
  deletedUsers                                     User[]              @relation("DeletorUsers")
  updatedBy                                        User?               @relation("UpdatorUsers", fields: [updatedById], references: [id])
  updatedUsers                                     User[]              @relation("UpdatorUsers")
  Wallet                                           Wallet?
  WithdrawalRequest                                WithdrawalRequest[]
  WithdrawalRequest_WithdrawalRequest_userIdToUser WithdrawalRequest[] @relation("WithdrawalRequest_userIdToUser")
  roles                                            Role[]              @relation("UserRoles")

  @@index([deletedAt])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(100)
  createdById Int?
  updatedById Int?
  deletedById Int?
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   User?        @relation("RoleCreatedBy", fields: [createdById], references: [id])
  deletedBy   User?        @relation("RoleDeletedBy", fields: [deletedById], references: [id])
  updatedBy   User?        @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  permissions Permission[] @relation("RolePermissions")
  users       User[]       @relation("UserRoles")

  @@index([deletedAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(100)
  description String?
  path        String     @db.VarChar(500)
  method      HTTPMethod
  module      String?    @db.VarChar(100)
  createdById Int?
  updatedById Int?
  deletedById Int?
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User?      @relation("PermissionCreatedBy", fields: [createdById], references: [id])
  deletedBy   User?      @relation("PermissionDeletedBy", fields: [deletedById], references: [id])
  updatedBy   User?      @relation("PermissionUpdatedBy", fields: [updatedById], references: [id])
  roles       Role[]     @relation("RolePermissions")

  @@index([deletedAt])
}

model Device {
  id            Int            @id @default(autoincrement())
  userId        Int
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true)
  fcmToken      String?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  deviceId  Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
}

model VerificationCode {
  id        Int                  @id @default(autoincrement())
  email     String               @db.VarChar(500)
  code      String               @db.VarChar(50)
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime             @default(now())

  @@unique([email, code, type])
  @@index([expiresAt])
}

model CustomerProfile {
  id                Int                @id @default(autoincrement())
  userId            Int                @unique
  address           String?
  dateOfBirth       DateTime?
  gender            Gender?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookings          Booking[]
  BookingReport     BookingReport[]
  chatMessages      ChatMessage[]
  Conversation      Conversation[]
  CustomerAsset     CustomerAsset[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  FavoriteService   FavoriteService[]
  recurringBookings RecurringBooking[]
  reviews           Review[]
  ServiceRequest    ServiceRequest[]
}

model Staff {
  id                Int                @id @default(autoincrement())
  userId            Int                @unique
  providerId        Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isActive          Boolean            @default(true)
  booking           Booking[]          @relation("StaffBooking")
  inspectionReports InspectionReport[]
  serviceProvider   ServiceProvider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffCategories   StaffCategory[]
  workLogs          WorkLog[]
}

model StaffCategory {
  staffId    Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  staff      Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@id([staffId, categoryId])
}

model ServiceProvider {
  id                 Int                @id @default(autoincrement())
  description        String?
  address            String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             Int                @unique
  companyType        CompanyType        @default(JOINT_STOCK)
  industry           String?            @db.VarChar(255)
  licenseNo          String?            @db.VarChar(100)
  logo               String?            @db.VarChar(1000)
  taxId              String             @default("98678822") @db.VarChar(100)
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  verifiedById       Int?
  bookings           Booking[]
  BookingReport      BookingReport[]
  Conversation       Conversation[]
  Review             Review[]
  services           Service[]
  ServiceItem        ServiceItem[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy         User?              @relation("VerifiedProviders", fields: [verifiedById], references: [id])
  ServiceRequest     ServiceRequest[]
  staff              Staff[]
}

model Category {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(500)
  logo                      String?                     @db.VarChar(1000)
  parentCategoryId          Int?
  createdById               Int?
  updatedById               Int?
  deletedById               Int?
  deletedAt                 DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  createdBy                 User?                       @relation("CategoryCreatedBy", fields: [createdById], references: [id])
  deletedBy                 User?                       @relation("CategoryDeletedBy", fields: [deletedById], references: [id])
  parentCategory            Category?                   @relation("ParentCategoryCategories", fields: [parentCategoryId], references: [id])
  childrenCategories        Category[]                  @relation("ParentCategoryCategories")
  updatedBy                 User?                       @relation("CategoryUpdatedBy", fields: [updatedById], references: [id])
  CustomerAsset             CustomerAsset[]
  Service                   Service[]
  ServiceRequest            ServiceRequest[]
  staffCategories           StaffCategory[]
  suggested_services_config suggested_services_config[]

  @@index([deletedAt])
}

model Service {
  id                   Int                    @id @default(autoincrement())
  basePrice            Float
  virtualPrice         Float
  images               String[]
  durationMinutes      Int
  providerId           Int
  createdById          Int?
  updatedById          Int?
  deletedById          Int?
  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  name                 String                 @default("test") @db.VarChar(100)
  publishedAt          DateTime?              @default(now())
  description          String                 @default("test description") @db.VarChar(5000)
  categoryId           Int
  unit                 Unit                   @default(PER_JOB)
  status               ServiceStatus          @default(PENDING)
  FavoriteService      FavoriteService[]
  ProposalItem         ProposalItem[]
  recurringBookings    RecurringBooking[]
  Review               Review[]
  Category             Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdBy            User?                  @relation("ServiceCreatedBy", fields: [createdById], references: [id])
  deletedBy            User?                  @relation("ServiceDeletedBy", fields: [deletedById], references: [id])
  provider             ServiceProvider        @relation(fields: [providerId], references: [id], onDelete: Cascade)
  updatedBy            User?                  @relation("ServiceUpdatedBy", fields: [updatedById], references: [id])
  Service_ServiceItems Service_ServiceItems[]

  @@index([deletedAt])
}

model Booking {
  id               Int               @id @default(autoincrement())
  customerId       Int
  providerId       Int
  status           BookingStatus
  deletedAt        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  staffId          Int?
  serviceRequestId Int?              @unique
  completedAt      DateTime?         @db.Timestamptz(6)
  customer         CustomerProfile   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  provider         ServiceProvider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  ServiceRequest   ServiceRequest?   @relation(fields: [serviceRequestId], references: [id])
  staff            Staff?            @relation("StaffBooking", fields: [staffId], references: [id], onDelete: Cascade)
  BookingReport    BookingReport[]
  inspectionReport InspectionReport?
  Proposal         Proposal?
  Review           Review?
  transaction      Transaction?
  workLogs         WorkLog[]
}

model InspectionReport {
  id            Int             @id @default(autoincrement())
  bookingId     Int             @unique
  staffId       Int
  estimatedTime Int?
  note          String?
  images        String[]
  createdAt     DateTime        @default(now())
  booking       Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  staff         Staff           @relation(fields: [staffId], references: [id], onDelete: Cascade)
  CustomerAsset CustomerAsset[] @relation("CustomerAssetToInspectionReport")
}

model Transaction {
  id          Int               @id @default(autoincrement())
  bookingId   Int               @unique
  amount      Float
  status      PaymentStatus
  method      PaymentMethod
  paidAt      DateTime?
  createdById Int?
  updatedById Int?
  deletedById Int?
  deletedAt   DateTime?
  createdAt   DateTime          @default(now())
  orderCode   String?           @unique @db.VarChar(255)
  type        transaction_type?
  booking     Booking           @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model PaymentTransaction {
  id                  Int                      @id @default(autoincrement())
  gateway             String                   @db.VarChar(100)
  transactionDate     DateTime                 @default(now())
  accountNumber       String?                  @db.VarChar(100)
  subAccount          String?                  @db.VarChar(250)
  amountIn            Int                      @default(0)
  amountOut           Int                      @default(0)
  accumulated         Int                      @default(0)
  referenceNumber     String?                  @db.VarChar(255)
  transactionContent  String?
  body                String?
  createdAt           DateTime                 @default(now())
  serviceRequestId    Int?
  status              PaymentTransactionStatus
  userId              Int?
  withdrawalRequestId Int?                     @unique
  bookingReportId     Int?                     @unique
  BookingReport       BookingReport?           @relation(fields: [bookingReportId], references: [id])
  ServiceRequest      ServiceRequest?          @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  WithdrawalRequest   WithdrawalRequest?       @relation(fields: [withdrawalRequestId], references: [id])
}

model Review {
  id              Int             @id @default(autoincrement())
  customerId      Int
  rating          Int             @db.SmallInt
  comment         String?         @db.VarChar(1000)
  createdAt       DateTime        @default(now())
  bookingId       Int             @unique
  deletedAt       DateTime?
  images          String[]        @default([])
  isEdited        Boolean         @default(false)
  providerId      Int
  serviceId       Int?
  updatedAt       DateTime
  Booking         Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customer        CustomerProfile @relation(fields: [customerId], references: [id], onDelete: Cascade)
  ServiceProvider ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  Service         Service?        @relation(fields: [serviceId], references: [id])

  @@index([customerId, createdAt])
  @@index([providerId, createdAt])
  @@index([serviceId, createdAt])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecurringBooking {
  id          Int             @id @default(autoincrement())
  customerId  Int
  serviceId   Int
  interval    String          @db.VarChar(100)
  nextRunDate DateTime
  active      Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  customer    CustomerProfile @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service     Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model WorkLog {
  id             Int       @id @default(autoincrement())
  staffId        Int
  bookingId      Int
  checkIn        DateTime?
  checkOut       DateTime?
  note           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  checkInImages  String[]  @default([])
  checkOutImages String[]  @default([])
  booking        Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  staff          Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id         Int             @id @default(autoincrement())
  customerId Int
  sender     String          @db.VarChar(50)
  message    String
  sentAt     DateTime        @default(now())
  isRead     Boolean         @default(false)
  customer   CustomerProfile @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model ServiceItem {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  unitPrice            Float
  warrantyPeriod       Int?
  createdAt            DateTime               @default(now())
  deletedAt            DateTime?
  updatedAt            DateTime
  brand                String?                @db.VarChar(255)
  description          String?                @db.VarChar(1000)
  isActive             Boolean                @default(true)
  model                String?                @db.VarChar(255)
  stockQuantity        Int                    @default(0)
  unit                 Unit                   @default(PER_ITEM)
  providerId           Int
  ServiceProvider      ServiceProvider        @relation(fields: [providerId], references: [id])
  Service_ServiceItems Service_ServiceItems[]
}

model ServiceRequest {
  id                 Int                  @id @default(autoincrement())
  customerId         Int
  providerId         Int
  note               String?
  preferredDate      DateTime
  status             RequestStatus        @default(PENDING)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  location           String               @db.VarChar(500)
  phoneNumber        String
  categoryId         Int
  Booking            Booking?
  PaymentTransaction PaymentTransaction[]
  Category           Category             @relation(fields: [categoryId], references: [id])
  CustomerProfile    CustomerProfile      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  ServiceProvider    ServiceProvider      @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([status])
}

model Service_ServiceItems {
  serviceId     Int
  serviceItemId Int
  Service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  ServiceItem   ServiceItem @relation(fields: [serviceItemId], references: [id], onDelete: Cascade)

  @@id([serviceId, serviceItemId])
}

model Conversation {
  id               Int             @id @default(autoincrement())
  customerId       Int
  providerId       Int
  lastMessage      String?         @db.VarChar(500)
  lastMessageAt    DateTime?
  unreadByCustomer Int             @default(0)
  unreadByProvider Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  CustomerProfile  CustomerProfile @relation(fields: [customerId], references: [id], onDelete: Cascade)
  ServiceProvider  ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  Message          Message[]

  @@unique([customerId, providerId])
  @@index([lastMessageAt])
}

model FavoriteService {
  id              Int             @id @default(autoincrement())
  customerId      Int
  serviceId       Int
  createdAt       DateTime?       @default(now()) @db.Timestamp(6)
  CustomerProfile CustomerProfile @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fav_customer")
  Service         Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fav_service")

  @@unique([customerId, serviceId], map: "unique_fav")
  @@index([customerId], map: "idx_fav_customer")
  @@index([serviceId], map: "idx_fav_service")
}

model Message {
  id             Int            @id @default(autoincrement())
  conversationId Int
  senderType     ChatSenderType
  senderId       Int
  content        String?        @db.VarChar(2000)
  imageUrl       String?        @db.VarChar(1000)
  isRead         Boolean        @default(false)
  sentAt         DateTime       @default(now())
  Conversation   Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, sentAt])
}

model Proposal {
  id           Int            @id @default(autoincrement())
  bookingId    Int            @unique
  notes        String?
  createdAt    DateTime       @default(now())
  status       ProposalStatus @default(ACCEPTED)
  Booking      Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  ProposalItem ProposalItem[]
}

model ProposalItem {
  id         Int                @id @default(autoincrement())
  proposalId Int
  serviceId  Int
  quantity   Int                @default(1)
  createdAt  DateTime           @default(now())
  status     ProposalItemStatus @default(PENDING)
  price      Float
  Proposal   Proposal           @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  Service    Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Wallet {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  balance       Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  accountHolder String?  @db.VarChar(255)
  bankAccount   String?  @db.VarChar(100)
  bankName      String?  @db.VarChar(255)
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WithdrawalRequest {
  id                                  Int                 @id @default(autoincrement())
  amount                              Float
  status                              WithdrawalStatus    @default(PENDING)
  createdAt                           DateTime            @default(now())
  processedAt                         DateTime?
  processedById                       Int?
  note                                String?             @db.VarChar(1000)
  userId                              Int
  PaymentTransaction                  PaymentTransaction?
  User                                User?               @relation(fields: [processedById], references: [id])
  User_WithdrawalRequest_userIdToUser User                @relation("WithdrawalRequest_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId])
}

model suggested_services_config {
  id                        Int       @id @default(autoincrement())
  category_id               Int
  display_name              String    @db.VarChar(255)
  suggested_interval_months Int
  notification_template     String    @db.VarChar(255)
  is_active                 Boolean?  @default(true)
  created_at                DateTime? @default(now()) @db.Timestamp(6)
  updated_at                DateTime? @default(now()) @db.Timestamp(6)
  Category                  Category  @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model AssetSuggestion {
  id              Int                  @id @default(autoincrement())
  customerAssetId Int
  productId       Int
  score           Float
  reason          String?              @db.VarChar(2000)
  status          RecommendationStatus @default(NEW)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime
  CustomerAsset   CustomerAsset        @relation(fields: [customerAssetId], references: [id], onDelete: Cascade)
  ExternalProduct ExternalProduct      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([customerAssetId, productId])
  @@index([customerAssetId, status])
  @@index([productId])
}

model CustomerAsset {
  id                    Int                @id @default(autoincrement())
  customerId            Int
  categoryId            Int
  brand                 String?            @db.VarChar(255)
  model                 String?            @db.VarChar(255)
  serial                String?            @db.VarChar(255)
  purchaseDate          DateTime?          @db.Timestamp(6)
  nickname              String?            @db.VarChar(255)
  lastMaintenanceDate   DateTime?          @db.Timestamp(6)
  totalMaintenanceCount Int?               @default(0)
  createdAt             DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt             DateTime?          @default(now()) @db.Timestamp(6)
  AssetSuggestion       AssetSuggestion[]
  Category              Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_asset_category")
  CustomerProfile       CustomerProfile    @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_asset_customer")
  InspectionReport      InspectionReport[] @relation("CustomerAssetToInspectionReport")

  @@index([brand, model], map: "idx_asset_brand_model")
  @@index([categoryId], map: "idx_asset_category")
  @@index([customerId], map: "idx_asset_customer")
}

model ExternalProduct {
  id              Int               @id @default(autoincrement())
  title           String
  url             String            @db.VarChar(1000)
  imageUrl        String?
  brand           String?
  model           String?
  categoryId      Int?
  price           Float?
  currency        String?           @default("VND")
  discountPct     Int?
  promoEndsAt     DateTime?
  source          String            @db.VarChar(100)
  releaseDate     DateTime?
  scrapedAt       DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  productId       String?           @db.VarChar(100)
  AssetSuggestion AssetSuggestion[]

  @@unique([source, productId], map: "external_product_source_productId")
  @@unique([source, url], map: "external_product_source_url")
  @@index([categoryId, scrapedAt])
}

model BookingReport {
  id                                    Int                 @id @default(autoincrement())
  bookingId                             Int
  reporterId                            Int
  reporterType                          ReporterType
  reportedCustomerId                    Int?
  reportedProviderId                    Int?
  reason                                String              @db.VarChar(255)
  description                           String?             @db.VarChar(2000)
  imageUrls                             String[]
  status                                ReportStatus        @default(PENDING)
  createdAt                             DateTime            @default(now())
  reviewedAt                            DateTime?
  reviewedById                          Int?
  note                                  String?             @db.VarChar(1000)
  reviewResponse                        String?             @db.VarChar(2000)
  Booking                               Booking             @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  CustomerProfile                       CustomerProfile?    @relation(fields: [reportedCustomerId], references: [id], onDelete: Cascade)
  ServiceProvider                       ServiceProvider?    @relation(fields: [reportedProviderId], references: [id], onDelete: Cascade)
  User_BookingReport_reporterIdToUser   User                @relation("BookingReport_reporterIdToUser", fields: [reporterId], references: [id], onDelete: Cascade)
  User_BookingReport_reviewedByIdToUser User?               @relation("BookingReport_reviewedByIdToUser", fields: [reviewedById], references: [id])
  PaymentTransaction                    PaymentTransaction?

  @@index([reportedCustomerId])
  @@index([reportedProviderId])
  @@index([reporterId])
  @@index([status])
}

model SystemConfig {
  id        Int       @id @default(autoincrement())
  key       String    @unique
  value     String?
  type      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  expiresAt DateTime?
}

model n8n_chat_histories {
  id         Int    @id @default(autoincrement())
  session_id String @db.VarChar(255)
  message    Json
}

model n8n_data {
  id        Int                    @id @default(autoincrement())
  text      String?
  metadata  Json?
  embedding Unsupported("vector")?
}

model n8nchathistory {
  id         Int    @id @default(autoincrement())
  session_id String @db.VarChar(255)
  message    Json
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Session {
  MORNING
  AFTERNOON
}

/// Thứ trong tuần
enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  STAFF_COMPLETED
  COMPLETED
  CANCELLED
  WAIT_FOR_PAYMENT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  WALLET
  MOMO
  ZALOPAY
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum CompanyType {
  SOLE_PROPRIETORSHIP
  LIMITED_LIABILITY
  JOINT_STOCK
  PARTNERSHIP
  OTHER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum InspectionStatus {
  NOT_YET
  IN_PROGRESS
  DONE
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  ESTIMATED
  CANCELLED
  WAIT_FOR_PAYMENT
}

enum Unit {
  PER_HOUR
  PER_ITEM
  PER_SQUARE_METER
  PER_JOB
}

enum ServiceStatus {
  PENDING
  REJECTED
  ACCEPTED
}

enum ChatSenderType {
  CUSTOMER
  PROVIDER
}

enum PaymentTransactionStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
  EXPIRED
  MANUAL_REVIEW
}

enum ProposalStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  REJECTED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}

enum transaction_type {
  BOOKING_DEPOSIT
  PROPOSAL_PAYMENT
}

enum RecommendationStatus {
  NEW
  SAVED
  DISMISSED
  PURCHASED
  STALE
  LIKED
}

enum ProposalItemStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum ReporterType {
  CUSTOMER
  PROVIDER
}
